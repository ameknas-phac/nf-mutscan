// Global pipeline parameters
params {
    input_dir                        = ''
    output_dir                       = 'results'
    mutations_csv                    = ''
    nextclade_datasets               = 'resources/nextclade_datasets'

    publish_dir_mode                 = 'copy'
    tracedir                         = "${params.output_dir}/pipeline_info"

    // Resource limits
    max_cpus                         = 16
    max_memory                       = '64GB'
    max_time                         = '48h'

    // Logging and debugging
    monochrome_logs                  = true
}

// Process configurations
process {
    // Default resources
    cpus                             = { check_max(1, 'cpus') }
    memory                           = { check_max('2 GB', 'memory') }
    time                             = { check_max('1h', 'time') }

    // Enable error tracing
    errorStrategy                    = { task.exitStatus == 143 ? 'retry' : 'terminate' }
    maxRetries                       = 1
}

// Profiles for different execution environments
profiles {
    // Docker profile
    docker {
        docker.enabled         = true
        singularity.enabled    = false
        conda.enabled          = false
    }

    // Singularity profile
    singularity {
        singularity.enabled    = true
        docker.enabled         = false
        conda.enabled          = false
        singularity.autoMounts = true
    }

    // Conda profile
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
    }

    // Slurm HPC environment
    slurm {
        process.executor       = 'slurm'
        process.queue          = 'general'
    }
}

// Logging and trace settings
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline.html"
    overwrite = true
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report.html"
    overwrite = true
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace.txt"
    overwrite = true
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag.svg"
    overwrite = true
}

// Manifest metadata
manifest {
    name            = 'nf-mutscan'
    description     = 'A scalable and reproducible pipeline for genomic mutation scanning.'
    author          = 'Abdallah Meknas'
    version         = '0.0.1'
    nextflowVersion = '!>=22.10.1'
}

// Function to enforce resource limits
def check_max(obj, type) {
    try {
        if (type == 'memory') {
            def maxMemory = params.max_memory as nextflow.util.MemoryUnit
            if (obj instanceof nextflow.util.MemoryUnit && obj.compareTo(maxMemory) > 0) {
                return maxMemory
            }
        } else if (type == 'time') {
            def maxTime = params.max_time as nextflow.util.Duration
            if (obj instanceof nextflow.util.Duration && obj.compareTo(maxTime) > 0) {
                return maxTime
            }
        } else if (type == 'cpus') {
            return Math.min(obj as int, params.max_cpus as int)
        }
    } catch (Exception e) {
        println "### ERROR ### Invalid ${type} value in check_max(): ${e.message}"
        return obj
    }
    return obj
}